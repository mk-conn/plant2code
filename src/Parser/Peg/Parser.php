<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace Plant2Code\Parser\Peg;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("Plant2Code\Parser\Peg\\chr_unicode")) {
    function chr_unicode($code)
    {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("Plant2Code\Parser\Peg\\ord_unicode")) {
    function ord_unicode($character)
    {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));

            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("Plant2Code\Parser\Peg\\peg_regex_test")) {
    function peg_regex_test($pattern, $string)
    {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("Plant2Code\Parser\Peg\\SyntaxError", false)) {
    class SyntaxError extends \Exception
    {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;

        public function __construct($message, $expected, $found, $offset, $line, $column)
        {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser
{
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = ['line' => 1, 'column' => 1, 'seenCR' => false];
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = [];
    private $peg_silentFails      = 0;
    private $input                = [];
    private $input_length         = 0;
    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;

    public function parse($input)
    {
        $arguments = func_get_args();
        $options = count($arguments) > 1 ? $arguments[ 1 ] : [];
        $this->cleanup_state();

        if (is_array($input)) {
            $this->input = $input;
        } else {
            preg_match_all("/./us", $input, $match);
            $this->input = $match[ 0 ];
        }
        $this->input_length = count($this->input);

        $old_regex_encoding = mb_regex_encoding();
        mb_regex_encoding("UTF-8");

        $this->peg_FAILED = new \stdClass;
        $this->peg_c0 = "@startuml";
        $this->peg_c1 = ["type" => "literal", "value" => "@startuml", "description" => "\"@startuml\""];
        $this->peg_c2 = "@enduml";
        $this->peg_c3 = ["type" => "literal", "value" => "@enduml", "description" => "\"@enduml\""];
        $this->peg_c4 = "hide empty members";
        $this->peg_c5 = ["type" => "literal", "value" => "hide empty members", "description" => "\"hide empty members\""];
        $this->peg_c6 = "skinparam";
        $this->peg_c7 = ["type" => "literal", "value" => "skinparam", "description" => "\"skinparam\""];
        $this->peg_c8 = "/^[^\\r\\n]/";
        $this->peg_c9 = ["type" => "class", "value" => "[\r\n]", "description" => "[\r\n]"];
        $this->peg_c10 = "/^[:]/";
        $this->peg_c11 = ["type" => "class", "value" => "[:]", "description" => "[:]"];
        $this->peg_c12 = "/^[\"]/";
        $this->peg_c13 = ["type" => "class", "value" => "[\"]", "description" => "[\"]"];
        $this->peg_c14 = "/^[\\\\]/";
        $this->peg_c15 = ["type" => "class", "value" => "[\\]", "description" => "[\\]"];
        $this->peg_c16 = "/^[^\"]/";
        $this->peg_c17 = "title ";
        $this->peg_c18 = ["type" => "literal", "value" => "title ", "description" => "\"title \""];
        $this->peg_c19 = "'";
        $this->peg_c20 = ["type" => "literal", "value" => "'", "description" => "\"'\""];
        $this->peg_c21 = "<|";
        $this->peg_c22 = ["type" => "literal", "value" => "<|", "description" => "\"<|\""];
        $this->peg_c23 = "|>";
        $this->peg_c24 = ["type" => "literal", "value" => "|>", "description" => "\"|>\""];
        $this->peg_c25 = "..";
        $this->peg_c26 = ["type" => "literal", "value" => "..", "description" => "\"..\""];
        $this->peg_c27 = "--";
        $this->peg_c28 = ["type" => "literal", "value" => "--", "description" => "\"--\""];
        $this->peg_c29 = "/^[.]/";
        $this->peg_c30 = ["type" => "class", "value" => "[.]", "description" => "[.]"];
        $this->peg_c31 = "/^[-]/";
        $this->peg_c32 = ["type" => "class", "value" => "[-]", "description" => "[-]"];
        $this->peg_c33 = "*";
        $this->peg_c34 = ["type" => "literal", "value" => "*", "description" => "\"*\""];
        $this->peg_c35 = "/^[*]/";
        $this->peg_c36 = ["type" => "class", "value" => "[*]", "description" => "[*]"];
        $this->peg_c37 = "o";
        $this->peg_c38 = ["type" => "literal", "value" => "o", "description" => "\"o\""];
        $this->peg_c39 = "/^[o]/";
        $this->peg_c40 = ["type" => "class", "value" => "[o]", "description" => "[o]"];
        $this->peg_c41 = "/^[{]/";
        $this->peg_c42 = ["type" => "class", "value" => "[{]", "description" => "[{]"];
        $this->peg_c43 = "/^[}]/";
        $this->peg_c44 = ["type" => "class", "value" => "[}]", "description" => "[}]"];
        $this->peg_c45 = "setpropname.*";
        $this->peg_c46 = ["type" => "literal", "value" => "setpropname.*", "description" => "\"setpropname.*\""];
        $this->peg_c47 = "package ";
        $this->peg_c48 = ["type" => "literal", "value" => "package ", "description" => "\"package \""];
        $this->peg_c49 = "end package";
        $this->peg_c50 = ["type" => "literal", "value" => "end package", "description" => "\"end package\""];
        $this->peg_c51 = "abstract ";
        $this->peg_c52 = ["type" => "literal", "value" => "abstract ", "description" => "\"abstract \""];
        $this->peg_c53 = "class ";
        $this->peg_c54 = ["type" => "literal", "value" => "class ", "description" => "\"class \""];
        $this->peg_c55 = "end class";
        $this->peg_c56 = ["type" => "literal", "value" => "end class", "description" => "\"end class\""];
        $this->peg_c57 = "/^[ \\t]/";
        $this->peg_c58 = ["type" => "class", "value" => "[ \t]", "description" => "[ \t]"];
        $this->peg_c59 = "/^[\\r\\n]/";
        $this->peg_c60 = "/^[\\n]/";
        $this->peg_c61 = ["type" => "class", "value" => "[\n]", "description" => "[\n]"];
        $this->peg_c62 = "/^[#]/";
        $this->peg_c63 = ["type" => "class", "value" => "[#]", "description" => "[#]"];
        $this->peg_c64 = "/^[0-9a-fA-F]/";
        $this->peg_c65 = ["type" => "class", "value" => "[0-9a-fA-F]", "description" => "[0-9a-fA-F]"];
        $this->peg_c66 = "namespace ";
        $this->peg_c67 = ["type" => "literal", "value" => "namespace ", "description" => "\"namespace \""];
        $this->peg_c68 = "end namespace";
        $this->peg_c69 = ["type" => "literal", "value" => "end namespace", "description" => "\"end namespace\""];
        $this->peg_c70 = "static ";
        $this->peg_c71 = ["type" => "literal", "value" => "static ", "description" => "\"static \""];
        $this->peg_c72 = "/^[\\(]/";
        $this->peg_c73 = ["type" => "class", "value" => "[(]", "description" => "[(]"];
        $this->peg_c74 = "/^[\\)]/";
        $this->peg_c75 = ["type" => "class", "value" => "[)]", "description" => "[)]"];
        $this->peg_c76 = "/^[ ]/";
        $this->peg_c77 = ["type" => "class", "value" => "[ ]", "description" => "[ ]"];
        $this->peg_c78 = "/^[,]/";
        $this->peg_c79 = ["type" => "class", "value" => "[,]", "description" => "[,]"];
        $this->peg_c80 = "/^[^ ,\\n\\r\\t\\(\\){}]/";
        $this->peg_c81 = ["type" => "class", "value" => "[ ,\n\r\t(){}]", "description" => "[ ,\n\r\t(){}]"];
        $this->peg_c82 = "/^[A-Za-z_]/";
        $this->peg_c83 = ["type" => "class", "value" => "[A-Za-z_]", "description" => "[A-Za-z_]"];
        $this->peg_c84 = "/^[A-Za-z0-9.]/";
        $this->peg_c85 = ["type" => "class", "value" => "[A-Za-z0-9.]", "description" => "[A-Za-z0-9.]"];
        $this->peg_c86 = "/^[A-Za-z0-9_]/";
        $this->peg_c87 = ["type" => "class", "value" => "[A-Za-z0-9_]", "description" => "[A-Za-z0-9_]"];
        $this->peg_c88 = "/^[+]/";
        $this->peg_c89 = ["type" => "class", "value" => "[+]", "description" => "[+]"];

        $peg_startRuleFunctions = ['plantumlfile' => [$this, "peg_parseplantumlfile"]];
        $peg_startRuleFunction = [$this, "peg_parseplantumlfile"];
        if (isset($options[ "startRule" ])) {
            if (!(isset($peg_startRuleFunctions[ $options[ "startRule" ] ]))) {
                throw new \Exception("Can't start parsing from rule \"" + $options[ "startRule" ] + "\".");
            }

            $peg_startRuleFunction = $peg_startRuleFunctions[ $options[ "startRule" ] ];
        }
        $peg_result = call_user_func($peg_startRuleFunction);

        mb_regex_encoding($old_regex_encoding);

        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
            $this->cleanup_state(); // Free up memory

            return $peg_result;
        } else {
            if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
                $this->peg_fail(["type" => "end", "description" => "end of input"]);
            }

            $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
            $this->cleanup_state(); // Free up memory
            throw $exception;
        }
    }

    private function cleanup_state()
    {
        $this->peg_currPos = 0;
        $this->peg_reportedPos = 0;
        $this->peg_cachedPos = 0;
        $this->peg_cachedPosDetails = ['line' => 1, 'column' => 1, 'seenCR' => false];
        $this->peg_maxFailPos = 0;
        $this->peg_maxFailExpected = [];
        $this->peg_silentFails = 0;
        $this->input = [];
        $this->input_length = 0;

    }

    private function text()
    {
        return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function input_substr($start, $length)
    {
        if ($length === 1 && $start < $this->input_length) {
            return $this->input[ $start ];
        }
        $substr = '';
        $max = min($start + $length, $this->input_length);
        for ($i = $start; $i < $max; $i++) {
            $substr .= $this->input[ $i ];
        }

        return $substr;
    }

    private function offset()
    {
        return $this->peg_reportedPos;
    }

    private function line()
    {
        $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);

        return $compute_pd[ "line" ];
    }

    private function peg_computePosDetails($pos)
    {
        if ($this->peg_cachedPos !== $pos) {
            if ($this->peg_cachedPos > $pos) {
                $this->peg_cachedPos = 0;
                $this->peg_cachedPosDetails = ["line" => 1, "column" => 1, "seenCR" => false];
            }
            $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
            $this->peg_cachedPos = $pos;
        }

        return $this->peg_cachedPosDetails;
    }

    private function peg_advancePos(&$details, $startPos, $endPos)
    {
        for ($p = $startPos; $p < $endPos; $p++) {
            $ch = $this->input_substr($p, 1);
            if ($ch === "\n") {
                if (!$details[ "seenCR" ]) {
                    $details[ "line" ]++;
                }
                $details[ "column" ] = 1;
                $details[ "seenCR" ] = false;
            } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
                $details[ "line" ]++;
                $details[ "column" ] = 1;
                $details[ "seenCR" ] = true;
            } else {
                $details[ "column" ]++;
                $details[ "seenCR" ] = false;
            }
        }
    }

    private function column()
    {
        $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);

        return $compute_pd[ "column" ];
    }

    private function expected($description)
    {
        throw $this->peg_buildException(
            null,
            [["type" => "other", "description" => $description]],
            $this->peg_reportedPos
        );
    }

    private function peg_buildException($message, $expected, $pos)
    {
        $posDetails = $this->peg_computePosDetails($pos);
        $found = $pos < $this->input_length ? $this->input[ $pos ] : null;

        if ($expected !== null) {
            usort($expected, [$this, "peg_buildException_expectedComparator"]);
            $i = 1;
            while ($i < count($expected)) {
                if ($expected[ $i - 1 ] === $expected[ $i ]) {
                    array_splice($expected, $i, 1);
                } else {
                    $i++;
                }
            }
        }

        if ($message === null) {
            $expectedDescs = array_fill(0, count($expected), null);

            for ($i = 0; $i < count($expected); $i++) {
                $expectedDescs[ $i ] = $expected[ $i ][ "description" ];
            }

            $expectedDesc = count($expected) > 1
                ? join(", ", array_slice($expectedDescs, 0, -1))
                . " or "
                . $expectedDescs[ count($expected) - 1 ]
                : $expectedDescs[ 0 ];

            $foundDesc = $found ? json_encode($found) : "end of input";

            $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
        }

        return new SyntaxError(
            $message,
            $expected,
            $found,
            $pos,
            $posDetails[ "line" ],
            $posDetails[ "column" ]
        );
    }

    private function error($message)
    {
        throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_buildException_expectedComparator($a, $b)
    {
        if ($a[ "description" ] < $b[ "description" ]) {
            return -1;
        } else if ($a[ "description" ] > $b[ "description" ]) {
            return 1;
        } else {
            return 0;
        }
    }

    private function peg_parseplantumlfile()
    {

        $s0 = $this->peg_currPos;
        $s1 = [];
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parsenoise();
        if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parsenewline();
            if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s2;
                $s3 = $this->peg_f0();
                $s2 = $s3;
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
        }
        if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            $s3 = $this->peg_parsenoise();
            if ($s3 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c0) {
                    $s4 = $this->peg_c0;
                    $this->peg_currPos += 9;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c1);
                    }
                }
                if ($s4 !== $this->peg_FAILED) {
                    $s5 = $this->peg_parsenoise();
                    if ($s5 !== $this->peg_FAILED) {
                        $s6 = $this->peg_parsenewline();
                        if ($s6 !== $this->peg_FAILED) {
                            $s7 = $this->peg_parseumllines();
                            if ($s7 !== $this->peg_FAILED) {
                                $s8 = $this->peg_parsenoise();
                                if ($s8 !== $this->peg_FAILED) {
                                    if ($this->input_substr($this->peg_currPos, 7) === $this->peg_c2) {
                                        $s9 = $this->peg_c2;
                                        $this->peg_currPos += 7;
                                    } else {
                                        $s9 = $this->peg_FAILED;
                                        if ($this->peg_silentFails === 0) {
                                            $this->peg_fail($this->peg_c3);
                                        }
                                    }
                                    if ($s9 !== $this->peg_FAILED) {
                                        $s10 = $this->peg_parsenoise();
                                        if ($s10 !== $this->peg_FAILED) {
                                            $this->peg_reportedPos = $s2;
                                            $s3 = $this->peg_f1($s7);
                                            $s2 = $s3;
                                        } else {
                                            $this->peg_currPos = $s2;
                                            $s2 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s2;
                                        $s2 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s2;
                                    $s2 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s2;
                                $s2 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
        }
        while ($s2 !== $this->peg_FAILED) {
            $s1[] = $s2;
            $s2 = $this->peg_currPos;
            $s3 = $this->peg_parsenoise();
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parsenewline();
                if ($s4 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s2;
                    $s3 = $this->peg_f0();
                    $s2 = $s3;
                } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
            if ($s2 === $this->peg_FAILED) {
                $s2 = $this->peg_currPos;
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c0) {
                        $s4 = $this->peg_c0;
                        $this->peg_currPos += 9;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c1);
                        }
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parsenewline();
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parseumllines();
                                if ($s7 !== $this->peg_FAILED) {
                                    $s8 = $this->peg_parsenoise();
                                    if ($s8 !== $this->peg_FAILED) {
                                        if ($this->input_substr($this->peg_currPos, 7) === $this->peg_c2) {
                                            $s9 = $this->peg_c2;
                                            $this->peg_currPos += 7;
                                        } else {
                                            $s9 = $this->peg_FAILED;
                                            if ($this->peg_silentFails === 0) {
                                                $this->peg_fail($this->peg_c3);
                                            }
                                        }
                                        if ($s9 !== $this->peg_FAILED) {
                                            $s10 = $this->peg_parsenoise();
                                            if ($s10 !== $this->peg_FAILED) {
                                                $this->peg_reportedPos = $s2;
                                                $s3 = $this->peg_f1($s7);
                                                $s2 = $s3;
                                            } else {
                                                $this->peg_currPos = $s2;
                                                $s2 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s2;
                                            $s2 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s2;
                                        $s2 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s2;
                                    $s2 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s2;
                                $s2 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                }
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f2($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parsenoise()
    {

        $s0 = [];
        if (peg_regex_test($this->peg_c57, $this->input_substr($this->peg_currPos, 1))) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c58);
            }
        }
        while ($s1 !== $this->peg_FAILED) {
            $s0[] = $s1;
            if (peg_regex_test($this->peg_c57, $this->input_substr($this->peg_currPos, 1))) {
                $s1 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c58);
                }
            }
        }

        return $s0;
    }

    private function peg_fail($expected)
    {
        if ($this->peg_currPos < $this->peg_maxFailPos) {
            return;
        }

        if ($this->peg_currPos > $this->peg_maxFailPos) {
            $this->peg_maxFailPos = $this->peg_currPos;
            $this->peg_maxFailExpected = [];
        }

        $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_parsenewline()
    {

        if (peg_regex_test($this->peg_c59, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c9);
            }
        }
        if ($s0 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c60, $this->input_substr($this->peg_currPos, 1))) {
                $s0 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c61);
                }
            }
        }

        return $s0;
    }

    private function peg_f0()
    {
        return null;
    }

    private function peg_parseumllines()
    {

        $s0 = $this->peg_currPos;
        $s1 = [];
        $s2 = $this->peg_parseumlline();
        while ($s2 !== $this->peg_FAILED) {
            $s1[] = $s2;
            $s2 = $this->peg_parseumlline();
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f3($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parseumlline()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsepropertyset();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsenewline();
            if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f0();
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parsetitleset();
            if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parsenewline();
                if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f0();
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parsenoise();
                if ($s1 !== $this->peg_FAILED) {
                    $s2 = $this->peg_parsenewline();
                    if ($s2 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f0();
                        $s0 = $s1;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parsecommentline();
                    if ($s1 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f0();
                    }
                    $s0 = $s1;
                    if ($s0 === $this->peg_FAILED) {
                        $s0 = $this->peg_currPos;
                        $s1 = $this->peg_parsehideline();
                        if ($s1 !== $this->peg_FAILED) {
                            $s2 = $this->peg_parsenewline();
                            if ($s2 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = $this->peg_f0();
                                $s0 = $s1;
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                        if ($s0 === $this->peg_FAILED) {
                            $s0 = $this->peg_currPos;
                            $s1 = $this->peg_parseskinparams();
                            if ($s1 !== $this->peg_FAILED) {
                                $s2 = $this->peg_parsenewline();
                                if ($s2 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s0;
                                    $s1 = $this->peg_f0();
                                    $s0 = $s1;
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                            if ($s0 === $this->peg_FAILED) {
                                $s0 = $this->peg_currPos;
                                $s1 = $this->peg_parsepackagedeclaration();
                                if ($s1 !== $this->peg_FAILED) {
                                    $s2 = $this->peg_parsenewline();
                                    if ($s2 !== $this->peg_FAILED) {
                                        $this->peg_reportedPos = $s0;
                                        $s1 = $this->peg_f4($s1);
                                        $s0 = $s1;
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                                if ($s0 === $this->peg_FAILED) {
                                    $s0 = $this->peg_currPos;
                                    $s1 = $this->peg_parsenamespacedeclaration();
                                    if ($s1 !== $this->peg_FAILED) {
                                        $s2 = $this->peg_parsenewline();
                                        if ($s2 !== $this->peg_FAILED) {
                                            $this->peg_reportedPos = $s0;
                                            $s1 = $this->peg_f4($s1);
                                            $s0 = $s1;
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                    if ($s0 === $this->peg_FAILED) {
                                        $s0 = $this->peg_currPos;
                                        $s1 = $this->peg_parseclassdeclaration();
                                        if ($s1 !== $this->peg_FAILED) {
                                            $s2 = $this->peg_parsenewline();
                                            if ($s2 !== $this->peg_FAILED) {
                                                $this->peg_reportedPos = $s0;
                                                $s1 = $this->peg_f4($s1);
                                                $s0 = $s1;
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                        if ($s0 === $this->peg_FAILED) {
                                            $s0 = $this->peg_currPos;
                                            $s1 = $this->peg_parseabstractclassdeclaration();
                                            if ($s1 !== $this->peg_FAILED) {
                                                $s2 = $this->peg_parsenewline();
                                                if ($s2 !== $this->peg_FAILED) {
                                                    $this->peg_reportedPos = $s0;
                                                    $s1 = $this->peg_f4($s1);
                                                    $s0 = $s1;
                                                } else {
                                                    $this->peg_currPos = $s0;
                                                    $s0 = $this->peg_FAILED;
                                                }
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                            if ($s0 === $this->peg_FAILED) {
                                                $s0 = $this->peg_currPos;
                                                $s1 = $this->peg_parsememberdeclaration();
                                                if ($s1 !== $this->peg_FAILED) {
                                                    $s2 = $this->peg_parsenewline();
                                                    if ($s2 !== $this->peg_FAILED) {
                                                        $this->peg_reportedPos = $s0;
                                                        $s1 = $this->peg_f4($s1);
                                                        $s0 = $s1;
                                                    } else {
                                                        $this->peg_currPos = $s0;
                                                        $s0 = $this->peg_FAILED;
                                                    }
                                                } else {
                                                    $this->peg_currPos = $s0;
                                                    $s0 = $this->peg_FAILED;
                                                }
                                                if ($s0 === $this->peg_FAILED) {
                                                    $s0 = $this->peg_currPos;
                                                    $s1 = $this->peg_parseconnectordeclaration();
                                                    if ($s1 !== $this->peg_FAILED) {
                                                        $s2 = $this->peg_parsenewline();
                                                        if ($s2 !== $this->peg_FAILED) {
                                                            $this->peg_reportedPos = $s0;
                                                            $s1 = $this->peg_f4($s1);
                                                            $s0 = $s1;
                                                        } else {
                                                            $this->peg_currPos = $s0;
                                                            $s0 = $this->peg_FAILED;
                                                        }
                                                    } else {
                                                        $this->peg_currPos = $s0;
                                                        $s0 = $this->peg_FAILED;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parsepropertyset()
    {

        if ($this->input_substr($this->peg_currPos, 13) === $this->peg_c45) {
            $s0 = $this->peg_c45;
            $this->peg_currPos += 13;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c46);
            }
        }

        return $s0;
    }

    private function peg_parsetitleset()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c17) {
                $s2 = $this->peg_c17;
                $this->peg_currPos += 6;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c18);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = [];
                    if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                        $s5 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c9);
                        }
                    }
                    if ($s5 !== $this->peg_FAILED) {
                        while ($s5 !== $this->peg_FAILED) {
                            $s4[] = $s5;
                            if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                                $s5 = $this->input_substr($this->peg_currPos, 1);
                                $this->peg_currPos++;
                            } else {
                                $s5 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_c9);
                                }
                            }
                        }
                    } else {
                        $s4 = $this->peg_FAILED;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s1 = [$s1, $s2, $s3, $s4, $s5];
                            $s0 = $s1;
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parsecommentline()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c19) {
                $s2 = $this->peg_c19;
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c20);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = [];
                if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                    $s4 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c9);
                    }
                }
                if ($s4 !== $this->peg_FAILED) {
                    while ($s4 !== $this->peg_FAILED) {
                        $s3[] = $s4;
                        if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                            $s4 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s4 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c9);
                            }
                        }
                    }
                } else {
                    $s3 = $this->peg_FAILED;
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parsenoise();
                    if ($s4 !== $this->peg_FAILED) {
                        $s1 = [$s1, $s2, $s3, $s4];
                        $s0 = $s1;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parsehideline()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 18) === $this->peg_c4) {
                $s2 = $this->peg_c4;
                $this->peg_currPos += 18;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c5);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s1 = [$s1, $s2, $s3];
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parseskinparams()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c6) {
                $s2 = $this->peg_c6;
                $this->peg_currPos += 9;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c7);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = [];
                    if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                        $s5 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c9);
                        }
                    }
                    if ($s5 !== $this->peg_FAILED) {
                        while ($s5 !== $this->peg_FAILED) {
                            $s4[] = $s5;
                            if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                                $s5 = $this->input_substr($this->peg_currPos, 1);
                                $this->peg_currPos++;
                            } else {
                                $s5 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_c9);
                                }
                            }
                        }
                    } else {
                        $s4 = $this->peg_FAILED;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s1 = [$s1, $s2, $s3, $s4];
                        $s0 = $s1;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parsepackagedeclaration()
    {

        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 8) === $this->peg_c47) {
            $s1 = $this->peg_c47;
            $this->peg_currPos += 8;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c48);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseobjectname();
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsestartblock();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parsenewline();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parseumllines();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parseendblock();
                            if ($s6 !== $this->peg_FAILED) {
                                $s1 = [$s1, $s2, $s3, $s4, $s5, $s6];
                                $s0 = $s1;
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 8) === $this->peg_c47) {
                $s1 = $this->peg_c47;
                $this->peg_currPos += 8;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c48);
                }
            }
            if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parseobjectname();
                if ($s2 !== $this->peg_FAILED) {
                    $s3 = $this->peg_parsenewline();
                    if ($s3 !== $this->peg_FAILED) {
                        $s4 = $this->peg_parseumllines();
                        if ($s4 !== $this->peg_FAILED) {
                            if ($this->input_substr($this->peg_currPos, 11) === $this->peg_c49) {
                                $s5 = $this->peg_c49;
                                $this->peg_currPos += 11;
                            } else {
                                $s5 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_c50);
                                }
                            }
                            if ($s5 !== $this->peg_FAILED) {
                                $s1 = [$s1, $s2, $s3, $s4, $s5];
                                $s0 = $s1;
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parseobjectname()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c82, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c83);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = [];
            if (peg_regex_test($this->peg_c84, $this->input_substr($this->peg_currPos, 1))) {
                $s4 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c85);
                }
            }
            while ($s4 !== $this->peg_FAILED) {
                $s3[] = $s4;
                if (peg_regex_test($this->peg_c84, $this->input_substr($this->peg_currPos, 1))) {
                    $s4 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c85);
                    }
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s2 = [$s2, $s3];
                $s1 = $s2;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f22($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_f22($objectname)
    {
        return implode("", [$objectname[ 0 ], implode("", $objectname[ 1 ])]);
    }

    private function peg_parsestartblock()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c41, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c42);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s1 = [$s1, $s2, $s3];
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parseendblock()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c43, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c44);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s1 = [$s1, $s2];
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_f4($declaration)
    {
        return $declaration;
    }

    private function peg_parsenamespacedeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 10) === $this->peg_c66) {
                $s2 = $this->peg_c66;
                $this->peg_currPos += 10;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c67);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseobjectname();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parsecolor();
                            if ($s6 === $this->peg_FAILED) {
                                $s6 = null;
                            }
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parsenoise();
                                if ($s7 !== $this->peg_FAILED) {
                                    $s8 = $this->peg_parsestartblock();
                                    if ($s8 !== $this->peg_FAILED) {
                                        $s9 = $this->peg_parseumllines();
                                        if ($s9 !== $this->peg_FAILED) {
                                            $s10 = $this->peg_parseendblock();
                                            if ($s10 !== $this->peg_FAILED) {
                                                $this->peg_reportedPos = $s0;
                                                $s1 = $this->peg_f15($s4, $s9);
                                                $s0 = $s1;
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parsenoise();
            if ($s1 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 10) === $this->peg_c66) {
                    $s2 = $this->peg_c66;
                    $this->peg_currPos += 10;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c67);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $s3 = $this->peg_parsenoise();
                    if ($s3 !== $this->peg_FAILED) {
                        $s4 = $this->peg_parseobjectname();
                        if ($s4 !== $this->peg_FAILED) {
                            $s5 = $this->peg_parsenoise();
                            if ($s5 !== $this->peg_FAILED) {
                                $s6 = $this->peg_parsenewline();
                                if ($s6 !== $this->peg_FAILED) {
                                    $s7 = $this->peg_parseumllines();
                                    if ($s7 !== $this->peg_FAILED) {
                                        if ($this->input_substr($this->peg_currPos, 13) === $this->peg_c68) {
                                            $s8 = $this->peg_c68;
                                            $this->peg_currPos += 13;
                                        } else {
                                            $s8 = $this->peg_FAILED;
                                            if ($this->peg_silentFails === 0) {
                                                $this->peg_fail($this->peg_c69);
                                            }
                                        }
                                        if ($s8 !== $this->peg_FAILED) {
                                            $this->peg_reportedPos = $s0;
                                            $s1 = $this->peg_f16($s4);
                                            $s0 = $s1;
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parsecolor()
    {

        $s0 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c62, $this->input_substr($this->peg_currPos, 1))) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c63);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            if (peg_regex_test($this->peg_c64, $this->input_substr($this->peg_currPos, 1))) {
                $s3 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c65);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    if (peg_regex_test($this->peg_c64, $this->input_substr($this->peg_currPos, 1))) {
                        $s3 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s3 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c65);
                        }
                    }
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                $s1 = [$s1, $s2];
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_f15($namespacename, $lines)
    {
        return new UmlNamespace($namespacename, $lines);
    }

    private function peg_f16($namespacename)
    {
        return new UmlNamespace($namespacename);
    }

    private function peg_parseclassdeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                $s2 = $this->peg_c53;
                $this->peg_currPos += 6;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c54);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseobjectname();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parsestartblock();
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parseumllines();
                                if ($s7 !== $this->peg_FAILED) {
                                    $s8 = $this->peg_parseendblock();
                                    if ($s8 !== $this->peg_FAILED) {
                                        $this->peg_reportedPos = $s0;
                                        $s1 = $this->peg_f13($s4, $s7);
                                        $s0 = $s1;
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parsenoise();
            if ($s1 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                    $s2 = $this->peg_c53;
                    $this->peg_currPos += 6;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c54);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $s3 = $this->peg_parsenoise();
                    if ($s3 !== $this->peg_FAILED) {
                        $s4 = $this->peg_parseobjectname();
                        if ($s4 !== $this->peg_FAILED) {
                            $s5 = $this->peg_parsenoise();
                            if ($s5 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = $this->peg_f14($s4);
                                $s0 = $s1;
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parsenoise();
                if ($s1 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                        $s2 = $this->peg_c53;
                        $this->peg_currPos += 6;
                    } else {
                        $s2 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c54);
                        }
                    }
                    if ($s2 !== $this->peg_FAILED) {
                        $s3 = $this->peg_parsenoise();
                        if ($s3 !== $this->peg_FAILED) {
                            $s4 = $this->peg_parseobjectname();
                            if ($s4 !== $this->peg_FAILED) {
                                $s5 = $this->peg_parsenoise();
                                if ($s5 !== $this->peg_FAILED) {
                                    $s6 = $this->peg_parsenewline();
                                    if ($s6 !== $this->peg_FAILED) {
                                        $s7 = $this->peg_parsenoise();
                                        if ($s7 !== $this->peg_FAILED) {
                                            $s8 = $this->peg_parseumllines();
                                            if ($s8 !== $this->peg_FAILED) {
                                                if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c55) {
                                                    $s9 = $this->peg_c55;
                                                    $this->peg_currPos += 9;
                                                } else {
                                                    $s9 = $this->peg_FAILED;
                                                    if ($this->peg_silentFails === 0) {
                                                        $this->peg_fail($this->peg_c56);
                                                    }
                                                }
                                                if ($s9 !== $this->peg_FAILED) {
                                                    $this->peg_reportedPos = $s0;
                                                    $s1 = $this->peg_f13($s4, $s8);
                                                    $s0 = $s1;
                                                } else {
                                                    $this->peg_currPos = $s0;
                                                    $s0 = $this->peg_FAILED;
                                                }
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            }
        }

        return $s0;
    }

    private function peg_f13($classname, $lines)
    {
        return new UmlClass($classname, $lines);
    }

    private function peg_f14($classname)
    {
        return new UmlClass($classname);
    }

    private function peg_parseabstractclassdeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c51) {
                $s2 = $this->peg_c51;
                $this->peg_currPos += 9;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c52);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                        $s4 = $this->peg_c53;
                        $this->peg_currPos += 6;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c54);
                        }
                    }
                    if ($s4 === $this->peg_FAILED) {
                        $s4 = null;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parseobjectname();
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parsenoise();
                                if ($s7 !== $this->peg_FAILED) {
                                    $s8 = $this->peg_parsestartblock();
                                    if ($s8 !== $this->peg_FAILED) {
                                        $s9 = $this->peg_parseumllines();
                                        if ($s9 !== $this->peg_FAILED) {
                                            $s10 = $this->peg_parseendblock();
                                            if ($s10 !== $this->peg_FAILED) {
                                                $this->peg_reportedPos = $s0;
                                                $s1 = $this->peg_f11($s6, $s9);
                                                $s0 = $s1;
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parsenoise();
            if ($s1 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c51) {
                    $s2 = $this->peg_c51;
                    $this->peg_currPos += 9;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c52);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $s3 = $this->peg_parsenoise();
                    if ($s3 !== $this->peg_FAILED) {
                        if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                            $s4 = $this->peg_c53;
                            $this->peg_currPos += 6;
                        } else {
                            $s4 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c54);
                            }
                        }
                        if ($s4 === $this->peg_FAILED) {
                            $s4 = null;
                        }
                        if ($s4 !== $this->peg_FAILED) {
                            $s5 = $this->peg_parsenoise();
                            if ($s5 !== $this->peg_FAILED) {
                                $s6 = $this->peg_parseobjectname();
                                if ($s6 !== $this->peg_FAILED) {
                                    $s7 = $this->peg_parsenoise();
                                    if ($s7 !== $this->peg_FAILED) {
                                        $this->peg_reportedPos = $s0;
                                        $s1 = $this->peg_f12($s6);
                                        $s0 = $s1;
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parsenoise();
                if ($s1 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c51) {
                        $s2 = $this->peg_c51;
                        $this->peg_currPos += 9;
                    } else {
                        $s2 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c52);
                        }
                    }
                    if ($s2 !== $this->peg_FAILED) {
                        $s3 = $this->peg_parsenoise();
                        if ($s3 !== $this->peg_FAILED) {
                            if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c53) {
                                $s4 = $this->peg_c53;
                                $this->peg_currPos += 6;
                            } else {
                                $s4 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_c54);
                                }
                            }
                            if ($s4 === $this->peg_FAILED) {
                                $s4 = null;
                            }
                            if ($s4 !== $this->peg_FAILED) {
                                $s5 = $this->peg_parsenoise();
                                if ($s5 !== $this->peg_FAILED) {
                                    $s6 = $this->peg_parseobjectname();
                                    if ($s6 !== $this->peg_FAILED) {
                                        $s7 = $this->peg_parsenoise();
                                        if ($s7 !== $this->peg_FAILED) {
                                            $s8 = $this->peg_parsenewline();
                                            if ($s8 !== $this->peg_FAILED) {
                                                $s9 = $this->peg_parsenoise();
                                                if ($s9 !== $this->peg_FAILED) {
                                                    $s10 = $this->peg_parseumllines();
                                                    if ($s10 !== $this->peg_FAILED) {
                                                        if ($this->input_substr($this->peg_currPos, 9) === $this->peg_c55) {
                                                            $s11 = $this->peg_c55;
                                                            $this->peg_currPos += 9;
                                                        } else {
                                                            $s11 = $this->peg_FAILED;
                                                            if ($this->peg_silentFails === 0) {
                                                                $this->peg_fail($this->peg_c56);
                                                            }
                                                        }
                                                        if ($s11 !== $this->peg_FAILED) {
                                                            $this->peg_reportedPos = $s0;
                                                            $s1 = $this->peg_f11($s6, $s10);
                                                            $s0 = $s1;
                                                        } else {
                                                            $this->peg_currPos = $s0;
                                                            $s0 = $this->peg_FAILED;
                                                        }
                                                    } else {
                                                        $this->peg_currPos = $s0;
                                                        $s0 = $this->peg_FAILED;
                                                    }
                                                } else {
                                                    $this->peg_currPos = $s0;
                                                    $s0 = $this->peg_FAILED;
                                                }
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            }
        }

        return $s0;
    }

    private function peg_f11($classname, $lines)
    {
        return new AbstractClass($classname, $lines);
    }

    private function peg_f12($classname)
    {
        return new AbstractClass($classname);
    }

    private function peg_parsememberdeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsemethoddeclaration();
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f4($s1);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parsefielddeclaration();
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f4($s1);
            }
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parsemethoddeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsefielddeclaration();
            if ($s2 !== $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c72, $this->input_substr($this->peg_currPos, 1))) {
                    $s3 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c73);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parsemethodparameters();
                    if ($s4 !== $this->peg_FAILED) {
                        if (peg_regex_test($this->peg_c74, $this->input_substr($this->peg_currPos, 1))) {
                            $s5 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s5 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c75);
                            }
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parsenoise();
                            if ($s6 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = $this->peg_f18($s2, $s4);
                                $s0 = $s1;
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parsefielddeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseaccessortype();
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parsereturntype();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parsemembername();
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parsenoise();
                                if ($s7 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s0;
                                    $s1 = $this->peg_f17($s2, $s4, $s6);
                                    $s0 = $s1;
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parseaccessortype()
    {

        $s0 = $this->peg_parsepublicaccessor();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseprivateaccessor();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseprotectedaccessor();
            }
        }

        return $s0;
    }

    private function peg_parsepublicaccessor()
    {

        if (peg_regex_test($this->peg_c88, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c89);
            }
        }

        return $s0;
    }

    private function peg_parseprivateaccessor()
    {

        if (peg_regex_test($this->peg_c31, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c32);
            }
        }

        return $s0;
    }

    private function peg_parseprotectedaccessor()
    {

        if (peg_regex_test($this->peg_c62, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c63);
            }
        }

        return $s0;
    }

    private function peg_parsereturntype()
    {

        $s0 = $this->peg_currPos;
        $s1 = [];
        if (peg_regex_test($this->peg_c80, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c81);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
                $s1[] = $s2;
                if (peg_regex_test($this->peg_c80, $this->input_substr($this->peg_currPos, 1))) {
                    $s2 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c81);
                    }
                }
            }
        } else {
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f21($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_f21($items)
    {
        return implode("", $items);
    }

    private function peg_parsemembername()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c82, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c83);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = [];
            if (peg_regex_test($this->peg_c86, $this->input_substr($this->peg_currPos, 1))) {
                $s4 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c87);
                }
            }
            while ($s4 !== $this->peg_FAILED) {
                $s3[] = $s4;
                if (peg_regex_test($this->peg_c86, $this->input_substr($this->peg_currPos, 1))) {
                    $s4 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c87);
                    }
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s2 = [$s2, $s3];
                $s1 = $s2;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f23($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_f23($items)
    {
        return implode("", [$items[ 0 ], implode("", $items[ 1 ])]);
    }

    private function peg_f17($accessortype, $returntype, $membername)
    {
        return new Field($accessortype, $returntype, $membername);
    }

    private function peg_parsemethodparameters()
    {

        $s0 = $this->peg_currPos;
        $s1 = [];
        $s2 = $this->peg_parsemethodparameter();
        while ($s2 !== $this->peg_FAILED) {
            $s1[] = $s2;
            $s2 = $this->peg_parsemethodparameter();
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f19($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parsemethodparameter()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsereturntype();
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_currPos;
                if (peg_regex_test($this->peg_c76, $this->input_substr($this->peg_currPos, 1))) {
                    $s4 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c77);
                    }
                }
                if ($s4 !== $this->peg_FAILED) {
                    $s5 = $this->peg_parsemembername();
                    if ($s5 !== $this->peg_FAILED) {
                        $s4 = [$s4, $s5];
                        $s3 = $s4;
                    } else {
                        $this->peg_currPos = $s3;
                        $s3 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
                if ($s3 === $this->peg_FAILED) {
                    $s3 = null;
                }
                if ($s3 !== $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c78, $this->input_substr($this->peg_currPos, 1))) {
                        $s4 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c79);
                        }
                    }
                    if ($s4 === $this->peg_FAILED) {
                        $s4 = null;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f20($s2, $s3);
                        $s0 = $s1;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_f20($item, $membername)
    {
        return new Parameter($item, $membername ? $membername[ 1 ] : null);
    }

    private function peg_f19($items)
    {
        return $items;
    }

    private function peg_f18($field, $parameters)
    {
        return new Method($field->getAccessorType(), $field->getReturnType(), $field->getName(), parameters);
    }

    private function peg_parseconnectordeclaration()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseobjectname();
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parsenoise();
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseconnectordescription();
                    if ($s4 === $this->peg_FAILED) {
                        $s4 = null;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parseconnectortype();
                            if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parsenoise();
                                if ($s7 !== $this->peg_FAILED) {
                                    $s8 = $this->peg_parseconnectordescription();
                                    if ($s8 === $this->peg_FAILED) {
                                        $s8 = null;
                                    }
                                    if ($s8 !== $this->peg_FAILED) {
                                        $s9 = $this->peg_parsenoise();
                                        if ($s9 !== $this->peg_FAILED) {
                                            $s10 = $this->peg_parseobjectname();
                                            if ($s10 !== $this->peg_FAILED) {
                                                $s11 = $this->peg_parsenoise();
                                                if ($s11 !== $this->peg_FAILED) {
                                                    $s12 = $this->peg_currPos;
                                                    if (peg_regex_test($this->peg_c10, $this->input_substr($this->peg_currPos, 1))) {
                                                        $s13 = $this->input_substr($this->peg_currPos, 1);
                                                        $this->peg_currPos++;
                                                    } else {
                                                        $s13 = $this->peg_FAILED;
                                                        if ($this->peg_silentFails === 0) {
                                                            $this->peg_fail($this->peg_c11);
                                                        }
                                                    }
                                                    if ($s13 !== $this->peg_FAILED) {
                                                        $s14 = [];
                                                        if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                                                            $s15 = $this->input_substr($this->peg_currPos, 1);
                                                            $this->peg_currPos++;
                                                        } else {
                                                            $s15 = $this->peg_FAILED;
                                                            if ($this->peg_silentFails === 0) {
                                                                $this->peg_fail($this->peg_c9);
                                                            }
                                                        }
                                                        if ($s15 !== $this->peg_FAILED) {
                                                            while ($s15 !== $this->peg_FAILED) {
                                                                $s14[] = $s15;
                                                                if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                                                                    $s15 = $this->input_substr($this->peg_currPos, 1);
                                                                    $this->peg_currPos++;
                                                                } else {
                                                                    $s15 = $this->peg_FAILED;
                                                                    if ($this->peg_silentFails === 0) {
                                                                        $this->peg_fail($this->peg_c9);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            $s14 = $this->peg_FAILED;
                                                        }
                                                        if ($s14 !== $this->peg_FAILED) {
                                                            $s13 = [$s13, $s14];
                                                            $s12 = $s13;
                                                        } else {
                                                            $this->peg_currPos = $s12;
                                                            $s12 = $this->peg_FAILED;
                                                        }
                                                    } else {
                                                        $this->peg_currPos = $s12;
                                                        $s12 = $this->peg_FAILED;
                                                    }
                                                    if ($s12 === $this->peg_FAILED) {
                                                        $s12 = null;
                                                    }
                                                    if ($s12 !== $this->peg_FAILED) {
                                                        $this->peg_reportedPos = $s0;
                                                        $s1 = $this->peg_f5($s2, $s6, $s10);
                                                        $s0 = $s1;
                                                    } else {
                                                        $this->peg_currPos = $s0;
                                                        $s0 = $this->peg_FAILED;
                                                    }
                                                } else {
                                                    $this->peg_currPos = $s0;
                                                    $s0 = $this->peg_FAILED;
                                                }
                                            } else {
                                                $this->peg_currPos = $s0;
                                                $s0 = $this->peg_FAILED;
                                            }
                                        } else {
                                            $this->peg_currPos = $s0;
                                            $s0 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s0;
                                        $s0 = $this->peg_FAILED;
                                    }
                                } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parseconnectordescription()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsenoise();
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c13);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = [];
                $s4 = $this->peg_currPos;
                if (peg_regex_test($this->peg_c14, $this->input_substr($this->peg_currPos, 1))) {
                    $s5 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c15);
                    }
                }
                if ($s5 !== $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
                        $s6 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s6 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c13);
                        }
                    }
                    if ($s6 !== $this->peg_FAILED) {
                        $s5 = [$s5, $s6];
                        $s4 = $s5;
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 === $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c16, $this->input_substr($this->peg_currPos, 1))) {
                        $s4 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c13);
                        }
                    }
                }
                while ($s4 !== $this->peg_FAILED) {
                    $s3[] = $s4;
                    $s4 = $this->peg_currPos;
                    if (peg_regex_test($this->peg_c14, $this->input_substr($this->peg_currPos, 1))) {
                        $s5 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c15);
                        }
                    }
                    if ($s5 !== $this->peg_FAILED) {
                        if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
                            $s6 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s6 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c13);
                            }
                        }
                        if ($s6 !== $this->peg_FAILED) {
                            $s5 = [$s5, $s6];
                            $s4 = $s5;
                        } else {
                            $this->peg_currPos = $s4;
                            $s4 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                    if ($s4 === $this->peg_FAILED) {
                        if (peg_regex_test($this->peg_c16, $this->input_substr($this->peg_currPos, 1))) {
                            $s4 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s4 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c13);
                            }
                        }
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
                        $s4 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c13);
                        }
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parsenoise();
                        if ($s5 !== $this->peg_FAILED) {
                            $s1 = [$s1, $s2, $s3, $s4, $s5];
                            $s0 = $s1;
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parseconnectortype()
    {

        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseextends();
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f6($s1);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseconcatenates();
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f7();
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parseaggregates();
                if ($s1 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f8();
                }
                $s0 = $s1;
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parseconnectorsize();
                    if ($s1 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f0();
                    }
                    $s0 = $s1;
                }
            }
        }

        return $s0;
    }

    private function peg_parseextends()
    {

        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c21) {
            $s1 = $this->peg_c21;
            $this->peg_currPos += 2;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c22);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseconnectorsize();
            if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f9();
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseconnectorsize();
            if ($s1 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c23) {
                    $s2 = $this->peg_c23;
                    $this->peg_currPos += 2;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c24);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f10();
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parseconnectorsize()
    {

        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c25) {
            $s0 = $this->peg_c25;
            $this->peg_currPos += 2;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c26);
            }
        }
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c27) {
                $s0 = $this->peg_c27;
                $this->peg_currPos += 2;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c28);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c29, $this->input_substr($this->peg_currPos, 1))) {
                    $s0 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c30);
                    }
                }
                if ($s0 === $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c31, $this->input_substr($this->peg_currPos, 1))) {
                        $s0 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c32);
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_f9()
    {
        return new Extension(true);
    }

    private function peg_f10()
    {
        return new Extension(false);
    }

    private function peg_f6($item)
    {
        return $item;
    }

    private function peg_parseconcatenates()
    {

        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c33) {
            $s1 = $this->peg_c33;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c34);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseconnectorsize();
            if ($s2 !== $this->peg_FAILED) {
                $s1 = [$s1, $s2];
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseconnectorsize();
            if ($s1 !== $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c35, $this->input_substr($this->peg_currPos, 1))) {
                    $s2 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c36);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $s1 = [$s1, $s2];
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_f7()
    {
        return new Composition();
    }

    private function peg_parseaggregates()
    {

        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c37) {
            $s1 = $this->peg_c37;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c38);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseconnectorsize();
            if ($s2 !== $this->peg_FAILED) {
                $s1 = [$s1, $s2];
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseconnectorsize();
            if ($s1 !== $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c39, $this->input_substr($this->peg_currPos, 1))) {
                    $s2 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s2 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c40);
                    }
                }
                if ($s2 !== $this->peg_FAILED) {
                    $s1 = [$s1, $s2];
                    $s0 = $s1;
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_f8()
    {
        return new Aggregation();
    }

    private function peg_f5($leftObject, $connector, $rightObject)
    {
        return new Connection($leftObject, $connector, $rightObject);
    }

    private function peg_f3($lines)
    {
        for ($i = 0; $i < $lines; $i++) {
            if ($lines[ $i ] === null) {
                array_splice($lines, $i, 1);
                $i--;
            }
        }

        return $lines;
    }

    private function peg_f1($filelines)
    {
        return new UMLBlock($filelines);
    }

    private function peg_f2($items)
    {
        for ($i = 0; $i < count($items); $i++) {
            if ($items[ $i ] === null) {
                array_splice($items, $i, 1);
                $i--;
            }
        }

        return $items;
    }

    private function peg_parsestaticmemberdeclaration()
    {

        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 7) === $this->peg_c70) {
            $s1 = $this->peg_c70;
            $this->peg_currPos += 7;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c71);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsememberdeclaration();
            if ($s2 !== $this->peg_FAILED) {
                $s1 = [$s1, $s2];
                $s0 = $s1;
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

}

;
